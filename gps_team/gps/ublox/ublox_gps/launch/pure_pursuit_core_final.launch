<?xml version="1.0" encoding="UTF-8"?>

<launch>
  <arg name="path" />
  <arg name="ld" default="4"/>
  <arg name="vel" default="5"/>
  <arg name="final_constant" default="1.0" />
  <arg name="obs_order" default="1" />
  <arg name="pk" default="1"/>

  <!-- gps node-->
  <arg name="node_name" default="gps_front"/>
  <arg name="param_file_name" doc="name of param file, e.g. rover" default="nmea1"/>
  <arg name="output" default="screen" />
  <arg name="respawn" default="true" />
  <arg name="respawn_delay" default="30" />
  <arg name="clear_params" default="true" />


  <node pkg="ublox_gps" type="ublox_gps" name="$(arg node_name)"
        output="$(arg output)"
        clear_params="$(arg clear_params)"
        respawn="$(arg respawn)"
        respawn_delay="$(arg respawn_delay)">
    <rosparam command="load" file="$(find ublox_gps)/config/$(arg param_file_name).yaml" />
  </node>

  <!-- gps velocity-->
  <node pkg="pure_pursuit" type="gps_velocity.py" name="gps_velocity"/>

  <!-- gps yaw-->
  <node pkg="pure_pursuit" type="gps_yaw.py" name="gps_yaw"/>

  <!-- usb_cam node-->
  <node name="usb_cam" pkg="usb_cam" type="usb_cam_node" output="screen" >
    <param name="video_device" value="/dev/video0" />
    <param name="image_width" value="640" />
    <param name="image_height" value="480" />
    <param name="pixel_format" value="yuyv" />
    <param name="framerate" value="25"/>
    <param name="camera_frame_id" value="usb_cam" />
    <param name="io_method" value="mmap"/>
  </node>

  <!-- yolov7 -->
  <node pkg="yolov7_ros" type="detect_ros_final.py" name="detect" output="screen" ns="yolov7">
      <!-- Download the official weights from the original repo -->
      <param name="weights_path" type="str"
      value="/home/foscar/FMTC_2022/src/yolov7-ros/weights/real_final_best.pt"/>
      
      <!-- Path to a class_labels.txt file containing your desired class labels. The i-th entry corresponds to the i-th class id. 
      For example, in coco class label 0 corresponds to 'person'. Files for the coco and berkeley deep drive datasets are provided in the 'class_labels/' directory. 
      If you leave it empty then no class labels are visualized.-->
      <param name="classes_path" type="str" value="/home/foscar/FMTC_2022/src/yolov7-ros/class_labels/Classes.txt" />
      <!-- topic name to subscribe to -->
      <param name="img_topic" type="str" value="/usb_cam/image_raw" />
        <!-- topic name for the detection output -->
      <param name="out_topic" type="str" value="yolov7" />
      <!-- confidence threshold -->
      <param name="conf_thresh" type="double" value="0.35" />
      <!-- intersection over union threshold -->
      <param name="iou_thresh" type="double" value="0.45" />
      <!-- queue size for publishing --> 
      <param name="queue_size" type="int" value="1" />
      <!-- image size to which to resize each input image before feeding into the
      network (the final output is rescaled to the original image size) -->
      <param name="img_size" type="int" value="640" />
      <!-- flag whether to also publish image with the visualized detections -->
      <param name="visualize" type="bool" value="true" />
      <!-- 'cuda' or 'cpu' -->
      <param name="device" type="str" value="cuda" />
      <!-- <we make> -->
      <!-- <param name="class" type="int" value="-1"> -->
  </node>


  <!-- yolov7 visualization -->
  <node name="YOLOV7" pkg="image_view" type="image_view" respawn="false" output="screen">
      <remap from="image" to="/yolov7/yolov7/visualization"/>
      <param name="autosize" value="true" />
  </node>
  <!-- vision_distance -->
  <!-- <node pkg="vision_distance" type="delivery_mission.py" name="delivery_mission"/> -->

  <!-- for pure pursuit -->
  <node pkg="pure_pursuit" type="pure_pursuit2" name="pure_pursuit2" output="screen" args="$(arg path) $(arg pk)" />
  <node pkg="pure_pursuit" type="coordinate2pos" name="coordinate2pos" />
  <node pkg="utmk_coordinate" type="wgs84_to_utmk.py" name="wgs84_to_utmk" />

  <!-- lidar(obstacle) -->
  <include file="$(find velodyne_pointcloud)/launch/VLP16_points.launch" />
  <node pkg="lidar_team_erp42" type="large_static_obstacle" name="large_static_obstacle"/>
  <node pkg="lidar_team_erp42" type="delivery" name="delivery" />
  <node pkg="lidar_team_erp42" type="parallel_parking" name="parallel_parking" />
  <node pkg="lidar_team_erp42" type="dynamic_obstacle" name="dynamic_obstacle" />
  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find lidar_team_erp42)/rviz/delivery.rviz" />

  <!-- for serial control -->
  <node pkg="race" type="serial_control_node" name="serial_control_node" />

</launch>
